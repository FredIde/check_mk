#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['sslcertificates_default_levels'] = {
    'age': ( 90, 60 ),
    'warnalgo': [ 'md5WithRSAEncryption', 'sha1WithRSAEncryption' ],
    }

def _sslcertificates_name(line):
    return line[0]

def parse_sslcertificates(info):
    parsed = {}
    for line in info:
        name = _sslcertificates_name(line)
        parsed[name] = {
            'endtime': int(line[1])
        }
        algosign = '/'
        if len(line) > 2:
            algosign = line[2]
        if algosign[0] == '/':
            # old agent plugin
            algosign = ''
            subj = " ".join(line[2:])
        else:
            subj = " ".join(line[3:])
        if subj.startswith('issuer_hash='):
            issuer_hash = subj[12:20]
            subj = subj[21:]
        else:
            issuer_hash = None
        parsed[name]['algosign'] = algosign
        parsed[name]['subj'] = subj
        parsed[name]['issuer_hash'] = issuer_hash
    return parsed

def inventory_sslcertificates(parsed):
    for name, data in parsed.items():
        sl = ServiceLabels()
        if data['issuer_hash']:
            sl.add_label(ServiceLabel(u'sslcertificates/issuer_hash', data['issuer_hash']))
        if data['algosign']:
            sl.add_label(ServiceLabel(u'sslcertificates/algorithm', data['algosign']))
        yield Service(item=name, service_labels=sl)

def check_sslcertificates(item, params, parsed):
    if type(params) == tuple:
        # old config
        warn, crit = params
        warnalgos = factory_settings['sslcertificates_default_values']['algo']
        ignore = None
    else:
        warn, crit = params.get('age', (0, 0))
        warnalgos = params.get('warnalgo', [])
        ignore = params.get('ignore', None)

    if item in parsed:
        data = parsed[item]
        
        now = int(time.time())
        daysremaining = ( data['endtime'] - now ) / 60 / 60 / 24
        secondsremaining = data['endtime'] - now
        ignored = False

        yield 0, "Subject: %s" % data['subj'], [ ( 'lifetime_remaining', secondsremaining, warn * 86400, crit * 86400 ) ]

        if daysremaining < 0:
            infotext = "expired %d days ago on %s" % ( abs(daysremaining), time.strftime("%c", time.gmtime(data['endtime'])))
        else:
            infotext = "expires in %d days on %s" % ( daysremaining, time.strftime("%c", time.gmtime(data['endtime'])))
        if ignore and -daysremaining > ignore[0]:
            yield 0, infotext + ', ignored because "%s"' % ignore[1]
            ignored = True
        else:
            if daysremaining < crit:
                yield 2, infotext
            elif daysremaining < warn:
                yield 1, infotext
            else:
                yield 0, infotext

        if data['algosign']:
            infotext = "Signature Algorithm: %s" % data['algosign']
            if not ignored and data['algosign'] in warnalgos:
                yield 1, infotext
            else:
                yield 0, infotext

check_info['sslcertificates'] = {
    'parse_function':      parse_sslcertificates,
    'check_function':      check_sslcertificates,
    'service_description': "SSL Certificate in %s",
    'has_perfdata':        True,
    'inventory_function':  inventory_sslcertificates,
    'group':               'sslcertificates',
    'default_levels_variable' : "sslcertificates_default_levels",
}
